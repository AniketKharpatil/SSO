import socket
import hashlib
import rsa_module as rsa
import pyfiglet

print(pyfiglet.figlet_format("Auth-Server", font="slant"))


IP = "127.0.0.1"
Port = 20001
bufferSize = 4096

KeySize=52
e, d, N = (rsa.generateKeys(KeySize))
n=rsa.generateLargePrime(32)
g=rsa.Generator(n)

print("Public key e:",e)
print("Generator g: ", g)
print("Big Prime N: ", N)
print("n:",n)

#bind socket
sock= socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
sock.bind((IP, Port))
print("\nAuthentication server is active and listening")

#connect to res server
msg1,addr2= sock.recvfrom(bufferSize)
print(msg1.decode(),addr2)
database=[]

while True:
    # start receiving messages
    USER_ID, addr1 = sock.recvfrom(bufferSize)
    USER_ID = USER_ID.decode()
    hash_result = hashlib.md5(USER_ID.encode()).hexdigest()
    concat = hash_result + USER_ID
    concat = int.from_bytes(concat.encode(), "big")
    # creating the signature S
    S = pow(concat, d, N)
    print("User is connected ,requesting for registration\nSignature for User:", addr1, " : ", S)
    database_dict={'USERID':USER_ID,'SIGNATURE':S}
    username = USER_ID

    #=============
    database.append(S)
    #=============

    sock.sendto(("Signature generated by server: " + str(S)).encode(), (addr1))
    sock.sendto("Registeration Successful ".encode(), (addr1))
    sock.sendto(str(S).encode(), addr1)
    response=sock.recv(bufferSize).decode()
    sock.sendto(response.encode(), addr2)
    #==========================
    login = sock.recv(bufferSize).decode()
    sock.sendto(login.encode(), addr2)
    #===========================
    if response == 'y':
        # serverid,addr2= sock.recvfrom(bufferSize)
        # serverid=serverid.decode()
        # sock.sendto(serverid.encode(),addr1)

        # announcing public keys
        pubkey = str(e)
        privkey = str(d)
        mult = str(N)
        gen = str(g)
        smalln = str(n)

        sock.sendto(pubkey.encode(), addr1)
        sock.sendto(mult.encode(), addr1)
        sock.sendto(gen.encode(), addr1)
        sock.sendto(smalln.encode(), addr1)

        sock.sendto(privkey.encode(), addr2)
        sock.sendto(mult.encode(), addr2)
        sock.sendto(gen.encode(), addr2)
        sock.sendto(smalln.encode(), addr2)
        sock.sendto(pubkey.encode(), addr2)

        # receive z,v,n2 from res server and send it to client
        Z = sock.recv(bufferSize).decode()
        sock.sendto(Z.encode(), addr1)

        v = sock.recv(bufferSize).decode()
        sock.sendto(v.encode(), addr1)

        n2 = sock.recv(bufferSize).decode()
        sock.sendto(n2.encode(), addr1)

        n3 = sock.recv(bufferSize).decode()
        sock.sendto(n3.encode(), addr1)

        concatv = sock.recv(bufferSize).decode()
        sock.sendto(concatv.encode(), addr1)
        ID_server = sock.recv(bufferSize).decode()
        sock.sendto(ID_server.encode(), addr1)

        # receive w x y and send to service prov

        W = (sock.recv(bufferSize).decode())
        X = (sock.recv(bufferSize).decode())
        #Y = (sock.recv(bufferSize).decode())

        sock.sendto(W.encode(), addr2)
        sock.sendto(X.encode(), addr2)
        #sock.sendto(Y.encode(), addr2)
        sock.sendto(USER_ID.encode(), addr2)

        V = sock.recv(bufferSize).decode()
        sock.sendto(V.encode(), addr1)

    def login_now():
        Sign = int(sock.recv(bufferSize).decode())
        for i in range(len(database)):
            if database[i] == Sign:
                sock.sendto("Verified".encode(), addr1)

    if login == 'yes':
        login_now()
